swagger: '2.0'
info:
  description: >-
    This is a sample server Petstore server.  You can find out more about    
    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,
    #swagger](http://swagger.io/irc/).      For this sample, you can use the api
    key `special-key` to test the authorization     filters.
  version: 1.0.0
  title: Swagger Petstore
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: petstore.swagger.io
basePath: /v2
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
schemes:
  - http
paths:
  /pet:
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: ''
      operationId: addPet
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Pet'
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  '/pet/{petId}':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: ''
      operationId: deletePet
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          type: integer
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  '/pet/info':
    post:
      tags:
        - pet
      summary: Updates a pet info in the store with form data
      description: ''
      operationId: updatePetWithForm
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Pet info object
          required: true
          schema:
            $ref: '#/definitions/Pet'
      responses:
        '405':
          description: Invalid input
        '200':
          description: successful operation  
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  '/pet/status':
    post:
      tags:
        - pet
      summary: Updates a pet status
      description: ''
      operationId: updatePetStatus
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Pet Status object
          required: true
          schema:
            $ref: '#/definitions/Status'
      responses:
        '405':
          description: Invalid input
        '200':
          description: successful operation  
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'            
  '/pet/{petId}/uploadImage':
   post:
        tags:
          - pet
        summary: Updates a pet status
        description: ''
        operationId: uploadImage
        consumes:
          - application/json
          - multipart/form-data
        produces:
          - application/json
        parameters:
          - name: petId
            in: path
            description: Id of pet to return
            required: true
            type: integer
          - in: formData
            name: upfile
            type: file
            description: The file to upload.
        responses:
          '405':
            description: Invalid input
          '200':
            description: successful operation  
  /pet/inventory:
    get:
      tags:
        - pet
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
      security:
        - api_key: []
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:pets': modify pets in your account
      'read:pets': read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Status:
    type: string
    enum:
          - available
          - pending
          - sold
  Tag:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
  Pet:
    type: object
    required:
      - info
    properties:
      id:
        type: integer
      category:
        type: string
      info:
        $ref: '#/definitions/Info'
      status:
        $ref: '#/definitions/Status'
  Info:
    type: object
    properties:
      name:
        type: string
      photoUrls:
        type: array
        items:
          type: string
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'